#!/bin/bash

# Started tmchem run: 2016-06-02T13:21:38-0400

set -x

if [ -z "$STARS_HOME" ]; then
    echo STARS_HOME must be set
    exit 1
fi

echo STARS_HOME: $STARS_HOME

env=test
app=ct2

dev () {
    SAMPLESIZE=0.001
    env=dev
    MESOS_MASTER=local[2]
    ARG_MESOS_MASTER="--master $MESOS_MASTER"
    ARG_EXECUTOR_MEMORY=10G
    ARG_MAX_RESULT_SIZE=1G
    ARG_DRIVER_MEMORY=15G
 }
test () {
    dev
    DATA_HOME=$STARS_HOME/app/chemotext/data
    TMCHEM_HOME=$APP_HOME/data/tmchem
    SAMPLESIZE=1
}
prod () {
    SAMPLESIZE=1
    ARG_MESOS_MASTER=
    ARG_EXECUTOR_MEMORY=70G
    ARG_TOTAL_EXECUTOR_CORES=200
    ARG_NUM_EXECUTORS=20
    ARG_DRIVER_MEMORY=3G
    ARG_TASK_CPUS=10
    ARG_DEFAULT_PARALLELISM=200
    ARG_MAX_RESULT_SIZE=4G
    export MESOS_MASTER=stars-c1.edc.renci.org:5050
    export MESOS_MASTER=$(hostname):5050
    echo mesos master: $MESOS_MASTER
    echo spark home: $SPARK_HOME
}
hatteras () {
    #MEDLINE_DATA=$DATA_HOME/pubmed/medline/medline16n0736.xml
    APP_HOME=/home/scox/dev/chemotext
    SPARK_HOME=/home/scox/dev/spark/current
    DATA_HOME=$STARS_HOME/var/chemotext
    SAMPLESIZE=1 #0.001
    VENV=/home/scox/dev/venv
    ARG_EXECUTOR_MEMORY=10G
    ARG_NUM_EXECUTORS=4
    ARG_DRIVER_MEMORY=5G
    ARG_MESOS_MASTER="--master $MESOS_MASTER"
}

genTmChemConfig () {
    rm -rf $LEXER_CONFIGPATH
    echo writing $LEXER_CONFIGPATH
    cat <<EOF >> $LEXER_CONFIGPATH
<?xml version="1.0" encoding="iso-8859-1"?>
<banner-configuration>
  <banner>
    <eval>
      <datasetName>banner.eval.dataset.PubtatorDataset</datasetName>
      <dataset> 
        <dataFilename>${TMCHEM_HOME}/data/CHEMDNER_BC5CDR.txt</dataFilename>
        <foldType>Chemical</foldType>
      </dataset>
      <idInputFilename>${TMCHEM_HOME}/output/ids.txt</idInputFilename>
      <rawInputFilename>${TMCHEM_HOME}/output/raw.txt</rawInputFilename>
      <trainingInputFilename>${TMCHEM_HOME}/output/training.txt</trainingInputFilename>
      <outputFilename>${TMCHEM_HOME}/output/output.txt</outputFilename>
      <inContextAnalysisFilename>${TMCHEM_HOME}/output/contextAnalysis.html</inContextAnalysisFilename>
      <mentionFilename>${TMCHEM_HOME}/output/mention.txt</mentionFilename>
      <modelFilename>${TMCHEM_HOME}/output/model_JOINT_O1.bin</modelFilename>
      <lemmatiserDataDirectory>${TMCHEM_HOME}/nlpdata/lemmatiser</lemmatiserDataDirectory>
      <posTaggerDataDirectory>${TMCHEM_HOME}/nlpdata/tagger</posTaggerDataDirectory>
      <posTagger>dragon.nlp.tool.HeppleTagger</posTagger>
      <tokenizer>banner.tokenization.FineTokenizer</tokenizer>
      <useParenthesisPostProcessing>true</useParenthesisPostProcessing>
      <useLocalAbbreviationPostProcessing>true</useLocalAbbreviationPostProcessing>
      <useNumericNormalization>true</useNumericNormalization>
      <tagFormat>IOB</tagFormat>
      <crfOrder>1</crfOrder>
      <textDirection>Forward</textDirection>
      <mentionTypes>Required</mentionTypes>
      <sameTypeOverlapOption>Union</sameTypeOverlapOption>
      <differentTypeOverlapOption>Exception</differentTypeOverlapOption>
    </eval>
  </banner>
</banner-configuration>
EOF
}

init () {
    APP_HOME=$STARS_HOME/app/chemotext
    SPARK_HOME=$STARS_HOME/stack/spark/current
    DATA_HOME=$STARS_HOME/var/chemotext
    MESHXML=$DATA_HOME/mesh/desc2016_2.xml
    TMCHEM_HOME=$DATA_HOME/tmchem
    VENV=$STARS_HOME/venv
    MEDLINE_DATA=$DATA_HOME/pubmed/medline/medline16n0736.xml
    CHEMLEX=tmchem #mesh
}

config () {
    PUBMEDC=$DATA_HOME/pubmed/articles
    CTDACPATH=$DATA_HOME/ctd/CTD_chemicals_diseases.csv
    CTDABPATH=$DATA_HOME/ctd/CTD_chem_gene_ixns.csv
    CTDBCPATH=$DATA_HOME/ctd/CTD_genes_diseases.csv
    LEXER_CONFIGPATH=$TMCHEM_HOME/config/banner_JOINT_${env}.xml
    LEXER_CACHEFILE=$TMCHEM_HOME/cacheFile.tsv
    LEXER_DICTIONARY=$TMCHEM_HOME/data/dict.txt
    OUTPUTPATH=$DATA_HOME/output.mesh.2
    INPUTPATH=$OUTPUTPATH
    mkdir -p $OUTPUTPATH
    export JAVA_OPTS="-Xmx5G -Xms5G"
    genTmChemConfig
}

execute () {
    $env
    config
    cd $APP_HOME
    execute_${app}
}

getarg () {
    echo $1 | sed s,.*=,,
}

main () {
    init
    for arg in $*; do
        case $arg in
	    --master\=*)
	        MESOS_MASTER=$(getarg $arg)
	        shift;;
	    --env\=*)
	        env=$(getarg $arg)
	        shift;;
            --chemlex\=*)
                CHEMLEX=$(getarg $arg)
                shift;;
            --app\=*)
                app=$(getarg $arg)
                shift;;
        esac
    done
    execute
}

spark () {
    $SPARK_HOME/bin/spark-submit \
	$ARG_MESOS_MASTER \
	--conf spark.driver.memory=$ARG_DRIVER_MEMORY \
	--conf spark.executor.memory=$ARG_EXECUTOR_MEMORY \
        --packages com.databricks:spark-xml_2.10:0.3.3 \
        --packages com.databricks:spark-csv_2.10:1.4.0 \
        $*
}

execute_ct2 () {
    spark \
	--class "org.chemotext.PipelineApp" \
	$( find $APP_HOME -name "*assembly*.jar" -print | grep scala ) \
	--name "Chemotext:Pipeline[Scala]" \
	--home $APP_HOME \
	--articles $PUBMEDC \
	--mesh $MESHXML \
	--chemlex $CHEMLEX \
	--sample $SAMPLESIZE \
	--ctdAC $CTDACPATH \
	--ctdAB $CTDABPATH \
	--ctdBC $CTDBCPATH \
	--output $OUTPUTPATH \
	--lexerConfig $LEXER_CONFIGPATH \
	--lexerCache $LEXER_CACHEFILE \
	--lexerDict $LEXER_DICTIONARY
}

execute_ct1 () {
    spark \
	--py-files python/chemotext_util.py \
	$APP_HOME/python/medline.py \
	--host  $MESOS_MASTER \
	--name  "Chemotext:CT1[Python]" \
	--venv  $VENV \
	--input $MEDLINE_DATA
}

execute_eval () {
    spark \
        --py-files python/chemotext_util.py \
        $APP_HOME/python/evaluate.py \
        --host  $MESOS_MASTER \
        --input $INPUTPATH \
        --name  "Chemotext:Eval[Python]" \
        --venv  $VENV \
        --ctdAB $CTDABPATH \
        --ctdBC $CTDBCPATH \
        --ctdAC $CTDACPATH
}

execute_w2v () {
    spark \
        --py-files python/chemotext_util.py \
        $APP_HOME/python/word2vec.py \
        --master $MESOS_MASTER \
        --name   "Chemotext:Word2Vec[Python]" \
        --input  $PUBMEDC \
        --mesh   $MESHXML \
        --home   $APP_HOME \
        --venv   $VENV
}

main $*
