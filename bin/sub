#!/bin/bash

######################################################################
##
## Run Chemotext in a variety of settings.
##   dev: A small run in a local dev environment.
##   test: Similar to dev but with test data.
##   prod: The Stars Mesos cluster
##   hatteras: Slurm
##
## Preconditions:
##
##   STARS_HOME must be set and configured correctly.
##
## Usage: bin/sub --env=prod --chemlex=mesh --app=ct2 --out=mesh.full 
##
##    --env: Select the environment and parameters to use
##    --chemlex: Select the chemical lexical analyzer (MeSH | tmChem)
##    --app: The application to run ct2|ct1|eval|kinase
##    --out: Suffix of the output directory
##
#######################################################################

set -x

if [ -z "$STARS_HOME" ]; then
    echo STARS_HOME must be set
    exit 1
fi

echo STARS_HOME: $STARS_HOME

env=test
app=ct2

dev () {
    SAMPLESIZE=0.001
    env=dev
    SLICES=10000
    MESOS_MASTER=local[2]
    ARG_MESOS_MASTER="--master $MESOS_MASTER"
    ARG_EXECUTOR_MEMORY=10G
    ARG_TOTAL_EXECUTOR_CORES=2
    ARG_MAX_RESULT_SIZE=1G
    ARG_DEFAULT_PARALLELISM=6
    ARG_DRIVER_MEMORY=10G
 }
test () {
    dev
    SLICES=1
    DATA_HOME=$STARS_HOME/app/chemotext/data
    TMCHEM_HOME=$APP_HOME/data/tmchem
    SAMPLESIZE=1
}
prod () {
    SAMPLESIZE=1
    SLICES=100
    ARG_MESOS_MASTER=
    ARG_EXECUTOR_MEMORY=200G
    ARG_DRIVER_MEMORY=10G
    ARG_TOTAL_EXECUTOR_CORES=$(( 30 * 5 ))
    ARG_MAX_RESULT_SIZE=10G
    ARG_DEFAULT_PARALLELISM=256
#    export MESOS_MASTER=mesos://$(hostname):5050
#    export MESOS_MASTER=mesos://stars-c1.edc.renci.org:5050
    export MESOS_MASTER=zk://stars-c0.edc.renci.org:2181/mesos
    PROXY_SETTINGS='--conf "spark.driver.extraJavaOptions=-Dhttp.proxyHost=gateway.ad.renci.org -Dhttp.proxyPort=8080 -Dhttps.proxyHost=gateway.ad.renci.org -Dhttps.proxyPort=8080" '
    EXTRA_JAVA_OPTS="-Dhttp.proxyHost=gateway.ad.renci.org -Dhttp.proxyPort=8080 -Dhttps.proxyHost=gateway.ad.renci.org -Dhttps.proxyPort=8080"

    DATA_HOME=file://$STARS_HOME/var/chemotext #hdfs://stars-c0.edc.renci.org:9000/chemotext
}
hatteras () {
    SLICES=100000
    APP_HOME=/home/scox/dev/chemotext
    SPARK_HOME=/home/scox/dev/spark/current
    DATA_HOME=$STARS_HOME/var/chemotext
    SAMPLESIZE=1 #0.001
    VENV=/home/scox/dev/venv
    ARG_DEFAULT_PARALLELISM=128
    ARG_TOTAL_EXECUTOR_CORES=8
    ARG_EXECUTOR_MEMORY=10G
    ARG_DRIVER_MEMORY=5G
    ARG_MESOS_MASTER="--master $MESOS_MASTER"
}

genTmChemConfig () {
    rm -rf $LEXER_CONFIGPATH
    echo writing $LEXER_CONFIGPATH
    cat <<EOF >> $LEXER_CONFIGPATH
<?xml version="1.0" encoding="iso-8859-1"?>
<banner-configuration>
  <banner>
    <eval>
      <datasetName>banner.eval.dataset.PubtatorDataset</datasetName>
      <dataset> 
        <dataFilename>${TMCHEM_HOME}/data/CHEMDNER_BC5CDR.txt</dataFilename>
        <foldType>Chemical</foldType>
      </dataset>
      <idInputFilename>${TMCHEM_HOME}/output/ids.txt</idInputFilename>
      <rawInputFilename>${TMCHEM_HOME}/output/raw.txt</rawInputFilename>
      <trainingInputFilename>${TMCHEM_HOME}/output/training.txt</trainingInputFilename>
      <outputFilename>${TMCHEM_HOME}/output/output.txt</outputFilename>
      <inContextAnalysisFilename>${TMCHEM_HOME}/output/contextAnalysis.html</inContextAnalysisFilename>
      <mentionFilename>${TMCHEM_HOME}/output/mention.txt</mentionFilename>
      <modelFilename>${TMCHEM_HOME}/output/model_JOINT_O1.bin</modelFilename>
      <lemmatiserDataDirectory>${TMCHEM_HOME}/nlpdata/lemmatiser</lemmatiserDataDirectory>
      <posTaggerDataDirectory>${TMCHEM_HOME}/nlpdata/tagger</posTaggerDataDirectory>
      <posTagger>dragon.nlp.tool.HeppleTagger</posTagger>
      <tokenizer>banner.tokenization.FineTokenizer</tokenizer>
      <useParenthesisPostProcessing>true</useParenthesisPostProcessing>
      <useLocalAbbreviationPostProcessing>true</useLocalAbbreviationPostProcessing>
      <useNumericNormalization>true</useNumericNormalization>
      <tagFormat>IOB</tagFormat>
      <crfOrder>1</crfOrder>
      <textDirection>Forward</textDirection>
      <mentionTypes>Required</mentionTypes>
      <sameTypeOverlapOption>Union</sameTypeOverlapOption>
      <differentTypeOverlapOption>Exception</differentTypeOverlapOption>
    </eval>
  </banner>
</banner-configuration>
EOF
}

init () {
    APP_HOME=$STARS_HOME/app/chemotext
    SPARK_HOME=$STARS_HOME/stack/spark/current
    DATA_HOME=$STARS_HOME/var/chemotext
    MESHXML=$DATA_HOME/mesh/desc2016_2.xml
    TMCHEM_HOME=$DATA_HOME/tmchem
    VENV=$STARS_HOME/venv
    MEDLINE_DATA=$DATA_HOME/pubmed/medline
    DISTANCETHRESHOLD=800
    CHEMLEX=tmchem
}

config () {
    PUBMEDC=$DATA_HOME/pubmed/articles
    CTDACPATH=$DATA_HOME/ctd/CTD_chemicals_diseases.csv
    CTDABPATH=$DATA_HOME/ctd/CTD_chem_gene_ixns.csv
    CTDBCPATH=$DATA_HOME/ctd/CTD_genes_diseases.csv
    LEXER_CONFIGPATH=$TMCHEM_HOME/config/banner_JOINT_${env}.xml
    LEXER_CACHEFILE=$TMCHEM_HOME/cacheFile.tsv
    LEXER_DICTIONARY=$TMCHEM_HOME/data/dict.txt
    if [ -z "$OUTPUTPATH" ]; then
        OUTPUTPATH=$DATA_HOME/output.mesh.full
    fi
    INPUTPATH=$OUTPUTPATH
    mkdir -p $OUTPUTPATH
    export JAVA_OPTS="-Xmx5G -Xms5G"
    genTmChemConfig
}

execute () {
    config
    cd $APP_HOME
    execute_${app}
}

getarg () {
    echo $1 | sed s,.*=,,
}

main () {
    init
    for arg in $*; do
        case $arg in
	    --master\=*)
	        MESOS_MASTER=$(getarg $arg)
	        shift;;
	    --env\=*)
	        env=$(getarg $arg)
                $env
	        shift;;
            --chemlex\=*)
                CHEMLEX=$(getarg $arg)
                shift;;
            --app\=*)
                app=$(getarg $arg)
                shift;;
            --out\=*)
                out=$(getarg $arg)
                OUTPUTPATH=$DATA_HOME/output.$out
                shift;;
        esac
    done
    execute
}

spark () {
    # --executor-cores 64 
    SPARK_CSV=com.databricks:spark-csv_2.10:1.4.0
    SPARK_XML=com.databricks:spark-xml_2.10:0.3.3
    #--conf spark.cleaner.ttl=1800 \
    #--executor-cores 50 \
    $SPARK_HOME/bin/spark-submit \
	$ARG_MESOS_MASTER \
	--total-executor-cores $ARG_TOTAL_EXECUTOR_CORES \
	--conf spark.executor.memory=$ARG_EXECUTOR_MEMORY \
	--conf spark.default.parallelism=$ARG_DEFAULT_PARALLELISM \
	--conf spark.driver.memory=$ARG_DRIVER_MEMORY \
	--conf spark.driver.maxResultSize=$ARG_MAX_RESULT_SIZE \
	--conf "spark.driver.extraJavaOptions=${EXTRA_JAVA_OPTS}" \
        --packages $SPARK_CSV,$SPARK_XML \
        $*
}

execute_ct2 () {
    spark \
	--class "org.chemotext.ChemotextApp" \
	$( find $APP_HOME -name "*assembly*.jar" -print | grep scala ) \
	--name "Chemotext2:ProcessRawArticle" \
	--dataHome $DATA_HOME \
	--articles $PUBMEDC \
	--mesh $MESHXML \
        --distanceThreshold $DISTANCETHRESHOLD \
	--chemlex $CHEMLEX \
	--sample $SAMPLESIZE \
	--ctdAC $CTDACPATH \
	--ctdAB $CTDABPATH \
	--ctdBC $CTDBCPATH \
	--output $OUTPUTPATH \
        --slices $SLICES \
	--lexerConfig $LEXER_CONFIGPATH \
	--lexerCache $LEXER_CACHEFILE \
	--lexerDict $LEXER_DICTIONARY 
}

execute_ct1 () {
    spark \
	--py-files python/chemotext_util.py \
	$APP_HOME/python/medline.py \
	--host  $MESOS_MASTER \
	--name  "Chemotext2:CT1(AnalyzeMedline)" \
	--venv  $VENV \
	--data  $DATA_HOME \
        $*
}
execute_pmidmap () {
    execute_ct1 --pmid --name "Chemotext2:CT1(PMID->Date)"
}
execute_equivset () {
    INPUTPATH=/projects/stars/var/chemotext/output.mesh.full.2016-07-09
    spark \
	--py-files python/chemotext_util.py \
	$APP_HOME/python/eset.py \
	--host   $MESOS_MASTER \
	--name   "Chemotext2:ESet)" \
	--venv   $VENV \
        --input  $INPUTPATH \
	--output $DATA_HOME/equiv \
        --parts  $(( 32 * 6 * 2 )) # 32 cores x 5 tasks x 2
}

execute_eval () {
    edev () {
        INPUTPATH=/Users/scox/dev/starshome/app/chemotext/data/output.mesh.full
        EVALOUTPUT=/Users/scox/dev/starshome/var/chemotext/eval
        EVAL_SLICES=1
        EVAL_PARTS=1
    }
    eprod () {
#        INPUTPATH=/projects/stars/var/chemotext/output.mesh.full.2016-07-09
        INPUTPATH=$DATA_HOME/equiv
        EVALOUTPUT=$DATA_HOME/eval
        EVAL_SLICES=10
        EVAL_PARTS=$(( 32 * 6 * 3 )) # 32 cores x 5 tasks x 3 (spark constant)

#	ARG_TOTAL_EXECUTOR_CORES=30
#	ARG_EXECUTOR_MEMORY=100G
#	EVAL_PARTS=100
    }
    e$env
    mkdir -p $EVALOUTPUT
    spark \
        --py-files python/chemotext_util.py \
        $APP_HOME/python/evaluate.py \
        --host  $MESOS_MASTER \
        --name  "Chemotext2:Evaluate(Article)" \
        --venv  $VENV \
        --input $INPUTPATH \
	--output $EVALOUTPUT \
        --slices $EVAL_SLICES \
        --parts $EVAL_PARTS \
        --ctdAB $CTDABPATH \
        --ctdBC $CTDBCPATH \
        --ctdAC $CTDACPATH
}

execute_w2v () {
    spark \
        --py-files python/chemotext_util.py \
        $APP_HOME/python/word2vec.py \
        --master $MESOS_MASTER \
        --name   "Chemotext2:WordEmbedding" \
        --venv   $VENV \
        --home   $APP_HOME \
        --input  $PUBMEDC \
        --mesh   $MESHXML
}

execute_kinase () {
    #INPUTPATH=$STARS_HOME/var/chemotext/output.tmchem
    #PROQINASEDB=$STARS_HOME/var/chemotext/proqinase/kinase_synonyms.txt
    #INTACTDB=$STARS_HOME/var/chemotext/intact/idA_P04637.txt
    #MESH_KINASE_SYNONYMS=$APP_HOME/kinases.json
    #KIN2PROT=$STARS_HOME/var/chemotext/kinase/kinase2uniprot.json
    #W2V_MODEL=$DATA_HOME/w2v.model
    spark \
        --py-files python/chemotext_util.py \
        $APP_HOME/python/kinase.py \
        --master    $MESOS_MASTER \
        --name      "Chemotext2:TP53-Kinase" \
        --venv      $VENV \
        --home      $APP_HOME \
        --input     $INPUTPATH \
        --intact    $INTACTDB \
        --medline   $MEDLINE_DATA \
        --proqinase $PROQINASEDB \
        --mesh      $MESH_KINASE_SYNONYMS \
        --kin2prot  $KIN2PROT \
        --w2v       $W2V_MODEL
}

main $*
